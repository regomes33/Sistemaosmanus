// Script para testar a API do backend
const axios = require('axios');

const API_URL = 'http://localhost:5000/api';

// Fun√ß√£o para testar a API de clientes
const testarClientes = async () => {
  console.log('\n===== TESTANDO API DE CLIENTES =====');
  try {
    // Criar um cliente
    console.log('Criando cliente...');
    const novoCliente = {
      nome: 'Cliente Teste',
      documento: '123.456.789-00',
      telefone: '(11) 98765-4321',
      email: 'cliente.teste@email.com',
      endereco: {
        rua: 'Rua Teste',
        numero: '123',
        bairro: 'Bairro Teste',
        cidade: 'Cidade Teste',
        estado: 'SP',
        cep: '12345-678'
      }
    };
    
    const clienteResponse = await axios.post(`${API_URL}/clientes`, novoCliente);
    console.log('Cliente criado com sucesso:', clienteResponse.data._id);
    
    const clienteId = clienteResponse.data._id;
    
    // Buscar cliente por ID
    console.log('\nBuscando cliente por ID...');
    const clienteGet = await axios.get(`${API_URL}/clientes/${clienteId}`);
    console.log('Cliente encontrado:', clienteGet.data.nome);
    
    // Atualizar cliente
    console.log('\nAtualizando cliente...');
    const clienteAtualizado = {
      ...novoCliente,
      nome: 'Cliente Teste Atualizado',
      telefone: '(11) 91234-5678'
    };
    
    const clienteUpdateResponse = await axios.put(`${API_URL}/clientes/${clienteId}`, clienteAtualizado);
    console.log('Cliente atualizado:', clienteUpdateResponse.data.nome);
    
    // Listar todos os clientes
    console.log('\nListando todos os clientes...');
    const clientesResponse = await axios.get(`${API_URL}/clientes`);
    console.log(`Total de clientes: ${clientesResponse.data.length}`);
    
    // Excluir cliente
    console.log('\nExcluindo cliente...');
    const clienteDeleteResponse = await axios.delete(`${API_URL}/clientes/${clienteId}`);
    console.log('Cliente exclu√≠do:', clienteDeleteResponse.data.message);
    
    console.log('\n‚úÖ TESTES DE CLIENTES CONCLU√çDOS COM SUCESSO');
    return true;
  } catch (error) {
    console.error('‚ùå ERRO NOS TESTES DE CLIENTES:', error.message);
    if (error.response) {
      console.error('Detalhes do erro:', error.response.data);
    }
    return false;
  }
};

// Fun√ß√£o para testar a API de tipos de servi√ßo
const testarTiposServico = async () => {
  console.log('\n===== TESTANDO API DE TIPOS DE SERVI√áO =====');
  try {
    // Criar um tipo de servi√ßo
    console.log('Criando tipo de servi√ßo...');
    const novoTipoServico = {
      nome: 'Tipo de Servi√ßo Teste',
      descricao: 'Descri√ß√£o detalhada do tipo de servi√ßo de teste'
    };
    
    const tipoServicoResponse = await axios.post(`${API_URL}/tipos-servico`, novoTipoServico);
    console.log('Tipo de servi√ßo criado com sucesso:', tipoServicoResponse.data._id);
    
    const tipoServicoId = tipoServicoResponse.data._id;
    
    // Buscar tipo de servi√ßo por ID
    console.log('\nBuscando tipo de servi√ßo por ID...');
    const tipoServicoGet = await axios.get(`${API_URL}/tipos-servico/${tipoServicoId}`);
    console.log('Tipo de servi√ßo encontrado:', tipoServicoGet.data.nome);
    
    // Atualizar tipo de servi√ßo
    console.log('\nAtualizando tipo de servi√ßo...');
    const tipoServicoAtualizado = {
      ...novoTipoServico,
      nome: 'Tipo de Servi√ßo Teste Atualizado',
      descricao: 'Descri√ß√£o atualizada do tipo de servi√ßo de teste'
    };
    
    const tipoServicoUpdateResponse = await axios.put(`${API_URL}/tipos-servico/${tipoServicoId}`, tipoServicoAtualizado);
    console.log('Tipo de servi√ßo atualizado:', tipoServicoUpdateResponse.data.nome);
    
    // Listar todos os tipos de servi√ßo
    console.log('\nListando todos os tipos de servi√ßo...');
    const tiposServicoResponse = await axios.get(`${API_URL}/tipos-servico`);
    console.log(`Total de tipos de servi√ßo: ${tiposServicoResponse.data.length}`);
    
    // N√£o vamos excluir o tipo de servi√ßo para us√°-lo no teste de ordens de servi√ßo
    console.log('\n‚úÖ TESTES DE TIPOS DE SERVI√áO CONCLU√çDOS COM SUCESSO');
    return { success: true, tipoServicoId };
  } catch (error) {
    console.error('‚ùå ERRO NOS TESTES DE TIPOS DE SERVI√áO:', error.message);
    if (error.response) {
      console.error('Detalhes do erro:', error.response.data);
    }
    return { success: false };
  }
};

// Fun√ß√£o para testar a API de ordens de servi√ßo
const testarOrdensServico = async (tipoServicoId) => {
  console.log('\n===== TESTANDO API DE ORDENS DE SERVI√áO =====');
  try {
    // Primeiro, precisamos criar um cliente para associar √† ordem de servi√ßo
    console.log('Criando cliente para teste de ordem de servi√ßo...');
    const clienteTeste = {
      nome: 'Cliente para Ordem de Servi√ßo',
      documento: '987.654.321-00',
      telefone: '(11) 97654-3210',
      email: 'cliente.ordem@email.com',
      endereco: {
        rua: 'Rua da Ordem',
        numero: '456',
        bairro: 'Bairro da Ordem',
        cidade: 'Cidade da Ordem',
        estado: 'RJ',
        cep: '98765-432'
      }
    };
    
    const clienteResponse = await axios.post(`${API_URL}/clientes`, clienteTeste);
    console.log('Cliente criado com sucesso:', clienteResponse.data._id);
    
    const clienteId = clienteResponse.data._id;
    
    // Criar uma ordem de servi√ßo
    console.log('\nCriando ordem de servi√ßo...');
    const novaOrdemServico = {
      cliente: clienteId,
      tipoServico: tipoServicoId,
      enderecoExecucao: 'Rua da Execu√ß√£o, 789 - Bairro Execu√ß√£o - Cidade Execu√ß√£o/SP',
      status: 'pendente',
      observacoes: 'Observa√ß√µes de teste para a ordem de servi√ßo'
    };
    
    // Como n√£o podemos enviar um arquivo facilmente neste teste, vamos usar apenas os dados
    const ordemServicoResponse = await axios.post(`${API_URL}/ordens-servico`, novaOrdemServico);
    console.log('Ordem de servi√ßo criada com sucesso:', ordemServicoResponse.data._id);
    
    const ordemServicoId = ordemServicoResponse.data._id;
    
    // Buscar ordem de servi√ßo por ID
    console.log('\nBuscando ordem de servi√ßo por ID...');
    const ordemServicoGet = await axios.get(`${API_URL}/ordens-servico/${ordemServicoId}`);
    console.log('Ordem de servi√ßo encontrada, cliente:', ordemServicoGet.data.cliente.nome);
    
    // Atualizar ordem de servi√ßo
    console.log('\nAtualizando ordem de servi√ßo...');
    const ordemServicoAtualizada = {
      ...novaOrdemServico,
      status: 'em andamento',
      observacoes: 'Observa√ß√µes atualizadas para a ordem de servi√ßo'
    };
    
    const ordemServicoUpdateResponse = await axios.put(`${API_URL}/ordens-servico/${ordemServicoId}`, ordemServicoAtualizada);
    console.log('Ordem de servi√ßo atualizada, status:', ordemServicoUpdateResponse.data.status);
    
    // Testar filtro de ordens de servi√ßo
    console.log('\nTestando filtro de ordens de servi√ßo...');
    const filtroResponse = await axios.get(`${API_URL}/ordens-servico/filtrar?cliente=${clienteId}&status=em andamento`);
    console.log(`Total de ordens filtradas: ${filtroResponse.data.length}`);
    
    // Listar todas as ordens de servi√ßo
    console.log('\nListando todas as ordens de servi√ßo...');
    const ordensServicoResponse = await axios.get(`${API_URL}/ordens-servico`);
    console.log(`Total de ordens de servi√ßo: ${ordensServicoResponse.data.length}`);
    
    // Excluir ordem de servi√ßo
    console.log('\nExcluindo ordem de servi√ßo...');
    const ordemServicoDeleteResponse = await axios.delete(`${API_URL}/ordens-servico/${ordemServicoId}`);
    console.log('Ordem de servi√ßo exclu√≠da:', ordemServicoDeleteResponse.data.message);
    
    // Excluir cliente criado para o teste
    console.log('\nExcluindo cliente criado para o teste...');
    await axios.delete(`${API_URL}/clientes/${clienteId}`);
    
    // Excluir tipo de servi√ßo criado para o teste
    console.log('\nExcluindo tipo de servi√ßo criado para o teste...');
    await axios.delete(`${API_URL}/tipos-servico/${tipoServicoId}`);
    
    console.log('\n‚úÖ TESTES DE ORDENS DE SERVI√áO CONCLU√çDOS COM SUCESSO');
    return true;
  } catch (error) {
    console.error('‚ùå ERRO NOS TESTES DE ORDENS DE SERVI√áO:', error.message);
    if (error.response) {
      console.error('Detalhes do erro:', error.response.data);
    }
    return false;
  }
};

// Fun√ß√£o principal para executar todos os testes
const executarTestes = async () => {
  console.log('üß™ INICIANDO TESTES DO SISTEMA DE ORDEM DE SERVI√áO');
  
  // Testar API de clientes
  const clientesResult = await testarClientes();
  
  // Testar API de tipos de servi√ßo
  const tiposServicoResult = await testarTiposServico();
  
  // Testar API de ordens de servi√ßo (apenas se os testes anteriores foram bem-sucedidos)
  let ordensServicoResult = false;
  if (clientesResult && tiposServicoResult.success) {
    ordensServicoResult = await testarOrdensServico(tiposServicoResult.tipoServicoId);
  }
  
  // Resumo dos testes
  console.log('\n===== RESUMO DOS TESTES =====');
  console.log(`Clientes: ${clientesResult ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
  console.log(`Tipos de Servi√ßo: ${tiposServicoResult.success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
  console.log(`Ordens de Servi√ßo: ${ordensServicoResult ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
  
  if (clientesResult && tiposServicoResult.success && ordensServicoResult) {
    console.log('\nüéâ TODOS OS TESTES FORAM CONCLU√çDOS COM SUCESSO!');
  } else {
    console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM. VERIFIQUE OS LOGS ACIMA PARA MAIS DETALHES.');
  }
};

// Executar os testes
executarTestes();
